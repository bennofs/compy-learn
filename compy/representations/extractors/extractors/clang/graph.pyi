from typing import List

import compy.representations.extractors.extractors

class CFGBlockInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def statements(self) -> Any: ...
    @property
    def successors(self) -> List[compy.representations.extractors.extractors.clang.graph.CFGBlockInfo]: ...

class DeclInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> str: ...

class ExtractionInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, arg0: compy.representations.extractors.extractors.Visitor) -> None: ...
    @property
    def functionInfos(self) -> Any: ...

class FunctionInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, arg0: compy.representations.extractors.extractors.Visitor) -> None: ...
    @property
    def args(self) -> List[compy.representations.extractors.extractors.clang.graph.DeclInfo]: ...
    @property
    def cfgBlocks(self) -> Any: ...
    @property
    def entryStmt(self) -> Any: ...
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> str: ...

class StmtInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def ast_relations(self) -> Any: ...
    @property
    def name(self) -> str: ...
    @property
    def ref_relations(self) -> Any: ...
