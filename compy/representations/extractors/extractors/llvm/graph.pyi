from typing import List

import compy.representations.extractors.extractors

class ArgInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> str: ...

class BasicBlockInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def instructions(self) -> List[compy.representations.extractors.extractors.llvm.graph.InstructionInfo]: ...
    @property
    def name(self) -> str: ...
    @property
    def successors(self) -> List[compy.representations.extractors.extractors.llvm.graph.BasicBlockInfo]: ...

class CallGraphInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def calls(self) -> List[str]: ...

class ConstantInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def type(self) -> str: ...

class ExtractionInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, arg0: compy.representations.extractors.extractors.Visitor) -> None: ...
    @property
    def callGraphInfo(self) -> Any: ...
    @property
    def functionInfos(self) -> Any: ...

class FunctionInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, arg0: compy.representations.extractors.extractors.Visitor) -> None: ...
    @property
    def args(self) -> Any: ...
    @property
    def basicBlocks(self) -> List[compy.representations.extractors.extractors.llvm.graph.BasicBlockInfo]: ...
    @property
    def entryInstruction(self) -> compy.representations.extractors.extractors.llvm.graph.InstructionInfo: ...
    @property
    def exitInstructions(self) -> List[compy.representations.extractors.extractors.llvm.graph.InstructionInfo]: ...
    @property
    def memoryAccesses(self) -> List[compy.representations.extractors.extractors.llvm.graph.MemoryAccessInfo]: ...
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> str: ...

class InstructionInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def callTarget(self) -> str: ...
    @property
    def function(self) -> Any: ...
    @property
    def isLoadOrStore(self) -> bool: ...
    @property
    def opcode(self) -> str: ...
    @property
    def operands(self) -> Any: ...
    @property
    def type(self) -> str: ...

class MemoryAccessInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def block(self) -> Any: ...
    @property
    def dependencies(self) -> List[compy.representations.extractors.extractors.llvm.graph.MemoryAccessInfo]: ...
    @property
    def inst(self) -> compy.representations.extractors.extractors.llvm.graph.InstructionInfo: ...
    @property
    def type(self) -> str: ...
