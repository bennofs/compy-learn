from typing import List

import compy.representations.extractors.extractors

class BasicBlockInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def instructions(self) -> Any: ...
    @property
    def name(self) -> str: ...

class ExtractionInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, arg0: compy.representations.extractors.extractors.Visitor) -> None: ...
    @property
    def functionInfos(self) -> Any: ...

class FunctionInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    def accept(self, arg0: compy.representations.extractors.extractors.Visitor) -> None: ...
    @property
    def basicBlocks(self) -> Any: ...
    @property
    def name(self) -> str: ...
    @property
    def signature(self) -> List[str]: ...
    @property
    def str(self) -> str: ...

class InstructionInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def tokens(self) -> List[str]: ...
